R7(And what?):
All sorts of shit up in here:
	!!!!!!Basically every single x,y you will see in any file is grid based. Even the drawer doesn't make a variable for a unit's x,y pixel position!!!!!!! #alwaysrememberthis
	addUnit to 1,1 rather than 32,32 //because of above
	deleted gx,gy from unit. x and y becoming grid based. Pixel value shouldn't be used.
	renamed moverelative to movepixelrelative //gets deleted in R7
	gridmoverelative to moverelative
	same with absolute versions of those.
	renamed validgridmove to validmove
	made playerMove tidier
	moveUnit in playerMove changed to moveUnitRelative 
	//need to make that function. #DONE
	moved validMoveRelative from gamelogic to unit. It wouldn't of worked if used it was used.
	drawSprites to * (x,y) of unit by gridpixel
	changed addunit,moveunit,setgridsquare,emptygridsquare a bit.
	moveunitrelative added. now calls the function IN the unit to move the units x,y position.
	Same with moveunit. 
	Added playerMoveAbsolute.
	deleting movepixelrelative - it's stupid. should only move by grid.
	deletingmovepixelabsolute - it's even more stupid. Somehow.
	added maxX and maxY variables which are set depending on size of canvas. makes some code easier to read and enables rectangular grid.
	can change moveable unit now. variable controlledUnit = 0, increased by 'a' and decreased by 's'. Stays within bounds of unitList.length. 
	can change moveable unit by clicking on it. I'm fucking amazing.
	added event listener for mouseup. The stolen part gets docx and docy which are the document coords of mouse click. the stolen function returns the position of an element (canvas). docx-elemx and docy-elemy give the coords relative to canvas.
	handlemouseclick converts pixel square clicked to grid square clicked.
	gridclicked finds the unit you clicked on from grid square clicked, if it exists and is clickable (added this bool to unit) calls clickedunit. #BREAKINGOUTOFANAMEDFORLOOPLIKEABOSS
	clickedunit sets controlledunit to the index of clicked unit. Also sorts out setnotcurrent and setcurrent // if (isyourturn) or something could go here #IVEDEALTWITHTHIS
	set
	Current and setNotCurrent added to unit. changes a boolean added to unit appropriately and changes sprite.
	Initial setCurrent is in Run function after adding the first unit. This is not legit.
	Added gameState array with YOURTURN and ADDUNIT
	changeState added 
	setNoCurrent sets there to be no current option
	showOccupied changed to showNotOccupied 
	In ADDUNIT state blue is shown where units can be added.
	click on a gridsquare to add a unit there
	yourTurn() and addingUnit() return true if in that state for convenience
	keyboard controls check state (no current controlled unit in addunit state, so would error hard)
	
	- Thought about making gridPixelx and gridPixely. To enable rectangular gridsquares. would involve changing sprite size depending on these values, which is long. Would make the grid system more awesome though if stolen for another game.
		#don'tstealthatshit
	- Thought about renaming moverelative/absolute to setxy or something, because it sets the x and y values, doesn't do anything else. Could be called by mistake thinking it does what playerMove does.
		#what'syouropinion.
	- Noticed EVERYTHING has relative and absolute versions. Although useful, it makes everything a bit less obvious/messy. We could stick to using one type only and delete the other, or continue as we are, or a third more badass option you need to think of.
		#'what'syourbadassidea.
	- Is there going to be impassable terrain? e.g. water. if so how will this be represented. Could make a class Thing() that has an int x int y bool solid. Unit would be a subclass of this.
		#doesjavascriptimplementinheritance
	- The mouse event registers when it's a mouseup event. This is different to mousedown and click. mousedown is obvious, click is only when both mouseup and mousedown happen in the same location.
		#youonlyhavetoreleasethemouseonaunittoselectit
	- What about undoing a move? To do this you'd need to store the last move made in a variable or something. Or write to some sort of log everytime an action is made, that idea sounds sort of cool. and could enable shit like replays which would be badman. Also unlimited move undoing.
		#'badmanreplaysandwhat.
		
	

R6(master, dave fork):
New Shit:
	- Split code up into multiple files
	- Added new array called "unitGrid," which holds units in their location on the grid
	- Added new attributes to Unit
		- gx - Grid X coord
		- gy - Grid Y coord
		- solid - true = unpassable, false = passable
	- Modified moveRelative() & moveAbsolute() to update the gx and gy positions
	- Modified playerMove() to move the unit around the board and in pixel space
	- Whether or not something is occupied is now checked based upon the solid attribute
	- Added a function addUnit(u)
	- Added a function moveUnit(u, prevgx, prevgy, gx, gy)
	- Added a function setGridSquare(u, gx, gy)

R5(mike's awesome):
	- Added validMove/validMoveRelative method, which checks the new location is in bounds and not occupied.
	- Added occupied/occupiedRelative method, which checks the grid square is not occupied,
	- occupiedgrid stores booleans in a 1d array representing whether a grid square is occupied. Updated in playerMove()
		- Added occupiedArrayConvert method takes a (x,y) and returns the index of that element in the array
	- Added setOccupied and setUnOccupied (x,y)
	- Added functions gridX and gridY which get each units position on the grid, replaced a lot of "this.x/getPixel" shit.
	- Added functions gridXAdd gridYAdd which is gridX or gridY plus the parameter, in hindsight this didn't help much.
	- Added function drawOccupied() which will draw a red rectangle over any space that is occupied.
	- Added a check box, and code that links it to whether to execute function drawOccupied().
	- Currently an occupied space created at 1,1 to demonstrate.
	
	

R4(master, mike fork):
Bug Fixes:
	- Player can't move out of canvas any more (because mike's a boss)
TODO:
	- Art assets
	- Control over more than one object
	- Add in unit addition automation function
	- Combat logic and shit
	- Other shit

R3 (master, mike fork):
Changes:
	- Grid movement
TODO:
	- Get basic art assets going
	- Control over more than one object
	- Combat logic and shit
	- Other shit

R2 (master):
Changes:
	- Keyboard input functionality added
TODO:
	- Grid system
	- Get basic art assets going
	- Control over more than one object

R1 (master):
Changes:
	- Initial data structures for storing unit states & drawing have been begun
TODO:
	- Grid system
	- Arrow Key Movement